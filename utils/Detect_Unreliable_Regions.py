#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Jun 27 14:18:14 2019

@author: mmkuang
"""
import math

tmp_str = "ARNDCQEGHILKMFPSTWYV"

matrix = []

def getMatrix():

    matrix.append([4, -1, -2, -2, 0, -1, -1, 0, -2, -1, -1, -1, -1, -2, -1, 1, 0, -3, -2, 0])
    matrix.append([-1, 5, 0, -2, -3, 1, 0, -2, 0, -3, -2, 2, -1, -3, -2, -1, -1, -3, -2, -3])
    matrix.append([-2, 0, 6, 1, -3, 0, 0, 0, 1, -3, -3, 0, -2, -3, -2, 1, 0, -4, -2, -3])
    matrix.append([-2, -2, 1, 6, -3, 0, 2, -1, -1, -3, -4, -1, -3, -3, -1, 0, -1, -4, -3, -3])
    matrix.append([0, -3, -3, -3, 9, -3, -4, -3, -3, -1, -1, -3, -1, -2, -3, -1, -1, -2, -2, -1])
    matrix.append([-1, 1, 0, 0, -3, 5, 2, -2, 0, -3, -2, 1, 0, -3, -1, 0, -1, -2, -1, -2])
    matrix.append([-1, 0, 0, 2, -4, 2, 5, -2, 0, -3, -3, 1, -2, -3, -1, 0, -1, -3, -2, -2])
    matrix.append([0, -2, 0, -1, -3, -2, -2, 6, -2, -4, -4, -2, -3, -3, -2, 0, -2, -2, -3, -3])
    matrix.append([-2, 0, 1, -1, -3, 0, 0, -2, 8, -3, -3, -1, -2, -1, -2, -1, -2, -2, 2, -3])
    matrix.append([-1, -3, -3, -3, -1, -3, -3, -4, -3, 4, 2, -3, 1, 0, -3, -2, -1, -3, -1, 3])
    matrix.append([-1, -2, -3, -4, -1, -2, -3, -4, -3, 2, 4, -2, 2, 0, -3, -2, -1, -2, -1, 1])
    matrix.append([-1, 2, 0, -1, -3, 1, 1, -2, -1, -3, -2, 5, -1, -3, -1, 0, -1, -3, -2, -2])
    matrix.append([-1, -1, -2, -3, -1, 0, -2, -3, -2, 1, 2, -1, 5, 0, -2, -1, -1, -1, -1, 1])
    matrix.append([-2, -3, -3, -3, -2, -3, -3, -3, -1, 0, 0, -3, 0, 6, -4, -2, -2, 1, 3, -1])
    matrix.append([-1, -2, -2, -1, -3, -1, -1, -2, -2, -3, -3, -1, -2, -4, 7, -1, -1, -4, -3, -2])
    matrix.append([1, -1, 1, 0, -1, 0, 0, 0, -1, -2, -2, 0, -1, -2, -1, 4, 1, -3, -2, -2])
    matrix.append([0, -1, 0, -1, -1, -1, -1, -2, -2, -1, -1, -1, -1, -2, -1, 1, 5, -2, -2, 0])
    matrix.append([-3, -3, -4, -4, -2, -2, -3, -2, -2, -3, -2, -3, -1, 1, -4, -3, -2, 11, 2, -3])
    matrix.append([-2, -2, -2, -3, -2, -1, -2, -3, 2, -1, -1, -2, -1, 3, -3, -2, -2, 2, 7, -1])
    matrix.append([0, -3, -3, -3, -1, -2, -2, -3, -3, 3, 1, -2, 1, -1, -2, -2, 0, -3, -1, 4])
    '''
    matrix.append([0.8295279118160849, 0.04612039975263726, 0.034536555970334525, 0.04060721233924807, 0.032611369658341494, 0.03883606350180782, 0.07439840748949385, 0.1015185950879537, 0.01757381385502196, 0.07417609699508435, 0.08838986264145493, 0.059630558326600074, 0.027844671544708106, 0.030009659785949976, 0.03325798850756307, 0.1191522183653295, 0.08133065808420264, 0.006285067505653683, 0.025833156538185496, 0.13473144440883464])
    matrix.append([0.04483054749319527, 0.48835916799451107, 0.022444332098024256, 0.02409247665175569, 0.004565264493064364, 0.03916952924342209, 0.049667775586019494, 0.01633700013993148, 0.01934101301362752, 0.019602256056550374, 0.03693344678315586, 0.10681906408410333, 0.008456262385064346, 0.008831481874359589, 0.009610132844626406, 0.03163467050650681, 0.029941951005926774, 0.0032985460667969684, 0.016575673589513264, 0.027323878178362983])
    matrix.append([0.033792887869746366, 0.024449640466378077, 0.2639914551519611, 0.050330193150579815, 0.0040732473582290995, 0.021610385624071825, 0.03566165019838673, 0.02621288994614895, 0.02013320573989898, 0.010892085746399022, 0.018250901655253976, 0.03071721653719243, 0.005868094268677467, 0.006731381213973287, 0.008881134979709935, 0.04514765027963726, 0.02851385998727075, 0.0022016638304211034, 0.01003105576043731, 0.015244631822223827])
    matrix.append([0.040443582787525335, 0.024605934900264966, 0.047854308761064744, 0.5047413073211247, 0.002500146702356717, 0.030701982061687214, 0.11172174399761665, 0.02389329999052077, 0.013831211039239495, 0.010318253835702389, 0.019447654342164063, 0.0351239296370358, 0.0041742462884303754, 0.0057936146106519456, 0.011463660697761547, 0.03510530972252942, 0.02482937387434153, 0.0013090364137818965, 0.007945061095889175, 0.013433986196436713])
    matrix.append([0.030694082704017838, 0.003788870482131653, 0.004896473275344525, 0.0018760974464762095, 0.1655378108397243, 0.0017779197154425672, 0.002145804086901962, 0.005001421884380487, 0.0015076488351832877, 0.012427946573258642, 0.015097929465506891, 0.002845461480475045, 0.0048524625683294435, 0.004982801969874107, 0.002247931496770291, 0.009951497943910047, 0.010764003304188466, 0.00037860492829640193, 0.0033436852534791026, 0.022969639383037595])
    matrix.append([0.04125778086730433, 0.03902339112653868, 0.02005646912253935, 0.031489660869290455, 0.0017361659677615929, 0.2019944749635501, 0.0675428935121447, 0.017804023707100845, 0.014723274216045175, 0.014856999056590998, 0.031077765790815982, 0.04930779057222947, 0.009577971174115385, 0.008013334115745903, 0.00831294546734857, 0.025645828913454637, 0.025753034481824706, 0.0023777066584814276, 0.008953357678401351, 0.02277836207947205])
    matrix.append([0.07780359488482737, 0.051192915856042104, 0.03757780867304333, 0.11054756090404763, 0.002440337280002889, 0.06985289139060293, 0.5691995016633791, 0.029295896396538727, 0.01995772715167218, 0.020309248567959303, 0.03487622835011759, 0.08325584439619567, 0.008748538618831165, 0.009345504362702393, 0.0188394038016223, 0.043753977890826364, 0.043713352622812444, 0.003635397247412396, 0.013108984052325346, 0.028429788252075275])
    matrix.append([0.10812245809954996, 0.016763565454077648, 0.026203862108812523, 0.02492642312570812, 0.0046149175984147115, 0.015144197131856078, 0.028455743284417502, 0.905127585911157, 0.009902973318226753, 0.015630571868356077, 0.02027257297878007, 0.020915242149166957, 0.006692448665459946, 0.008347364097193697, 0.013806948726397848, 0.05452926599168536, 0.024884669378027146, 0.003077928291888037, 0.0096586574703097, 0.01814256760721685])
    matrix.append([0.017962575100321843, 0.019708333145253387, 0.018015049404839823, 0.01318967034851966, 0.0014743586850052136, 0.015311212122579975, 0.021090720737393754, 0.0066433597999431245, 0.20316245141895034, 0.00866108144463453, 0.01694525068047324, 0.016951457318642033, 0.0045455160988909305, 0.011311880182542871, 0.004328283762983159, 0.01360269390666119, 0.010426587883739511, 0.0053202173903230615, 0.0181499027250527, 0.0126237377954924])
    matrix.append([0.0753700284828268, 0.020087502313383316, 0.011344606092887418, 0.009406442264723274, 0.013295183197389149, 0.015393026898441345, 0.018210840627073583, 0.01309092837765249, 0.009904666037727333, 0.608916343545322, 0.27621853234448424, 0.02063086527306951, 0.04828425951421207, 0.057643305632919105, 0.010618993666972108, 0.023797943458654762, 0.044598644921615804, 0.00716584588578883, 0.026551998086098486, 0.27685725183603643])
    matrix.append([0.09513817105043401, 0.039487760509531136, 0.02169784279826846, 0.017289436978924513, 0.017610489444201193, 0.029778885694037565, 0.03351979579031945, 0.021448448791849668, 0.019193746417077058, 0.2622513395053648, 1.0, 0.034885820427287544, 0.10384664864108478, 0.1074041807914705, 0.023195899556281794, 0.030986923177618187, 0.049206227402194665, 0.015459042958963965, 0.048265075359872164, 0.20246900066354603])
    matrix.append([0.06743343098444052, 0.1105407900260453, 0.03175259663171389, 0.03912044037790527, 0.0029018854638277127, 0.054380306675634316, 0.08521149965919914, 0.022421198264849663, 0.017371251754785884, 0.02176780853762577, 0.04133903140333217, 0.3621347675557582, 0.010123591093135684, 0.009604490446291138, 0.016840866311270804, 0.041050140608566515, 0.04196646609821384, 0.0029780578413538144, 0.012414969057087529, 0.03219608914086586])
    matrix.append([0.027976139425919824, 0.010758925145686726, 0.0064718308905510145, 0.005027941156556241, 0.005295390837647887, 0.009941905866740094, 0.01214977633532999, 0.00600351182872387, 0.004267910100795804, 0.048336733818730056, 0.10230965933455811, 0.010972772042593337, 0.12171612416887473, 0.023229753946293397, 0.003706491466436758, 0.010009050406929768, 0.0157050515263816, 0.003274283753955321, 0.01049147546459508, 0.04014792111475735])
    matrix.append([0.03059364801365009, 0.01038765533522617, 0.008381218487205298, 0.00584721739483698, 0.006822788067004609, 0.009607311645458772, 0.009597719568288818, 0.007029299846075373, 0.01151274956327837, 0.0589184876566894, 0.1179300748859107, 0.008703399432149032, 0.02272927321395523, 0.343942546843191, 0.009741600725838122, 0.01326979240488045, 0.01945498945999991, 0.017160790296880432, 0.0841174386219909, 0.050540654608485266])
    matrix.append([0.03343008165678871, 0.010384834136058537, 0.009022759177925133, 0.012644614669332888, 0.0017626852399373468, 0.00918808144914845, 0.021922974491845607, 0.014108252797501095, 0.004137570699251141, 0.011732803098353773, 0.021922410252012078, 0.017520211070836924, 0.0023297462726316596, 0.006243313757972709, 0.35964703412973903, 0.024993567665897796, 0.014381909116761534, 0.0006579036458921083, 0.0038672998189918616, 0.017305799934096786])
    matrix.append([0.12279777192974536, 0.033994885730148916, 0.04224237937680839, 0.03741530760098764, 0.009899023639392065, 0.025241833192649533, 0.04844958178543539, 0.05532371567729093, 0.012849433728903072, 0.02126168540695234, 0.03002602274112225, 0.03729625299611351, 0.01008014462595413, 0.013130989405832886, 0.02220396592894189, 0.40345912872341866, 0.10891239386648731, 0.003117989320068431, 0.014273010828890886, 0.031442264723274216])
    matrix.append([0.07929431652500485, 0.0331677101341988, 0.028465335361587456, 0.026259721852331663, 0.009443117853902509, 0.025328726127012643, 0.04119063632711466, 0.020901700393162317, 0.010631971183143222, 0.04351643292091163, 0.04878022632788202, 0.03639629046163846, 0.016228666091894356, 0.01690462541245932, 0.014754307406889143, 0.10707071504985623, 0.42698680130181416, 0.0031682066652523053, 0.015462992637798652, 0.07265208520472878])
    matrix.append([0.006495528963559135, 0.0030203758288683156, 0.0018394218572969753, 0.002885522508655439, 0.0, 0.003543990394381074, 0.005318524670822481, 0.0024550075156745824, 0.004029236651214019, 0.00789992190920704, 0.015236168224720927, 0.0031981113764292194, 0.004047292325886872, 0.017083489439687276, 0.001070362964200111, 0.003714390824106131, 0.0029131702604982463, 0.1456477924680753, 0.019319571899953508, 0.007749834113488943])
    matrix.append([0.02550589743474002, 0.015109214262177425, 0.010481883387425126, 0.008129567521452398, 0.003612827654071329, 0.008776186370673972, 0.012770440152209338, 0.0077199294023120296, 0.018947737849659425, 0.02714614263080208, 0.05045714711312332, 0.012053291323796927, 0.011950035434261546, 0.08197107029525542, 0.004660056785096846, 0.013788893051724994, 0.01633700013993148, 0.016554796715672778, 0.32862004992394045, 0.03000909554611645])
    matrix.append([0.1305577623602378, 0.02392602590086532, 0.015097365225673363, 0.01344301403377314, 0.02314568221109792, 0.02111159761123424, 0.028978793610096733, 0.018465312791994114, 0.011915052564582891, 0.2817971715785625, 0.2125198048181568, 0.026489367464577022, 0.038722087055435436, 0.04911369206949629, 0.01860862970970989, 0.03527514591242095, 0.07673718159946194, 0.007492540749400777, 0.029303231514374573, 0.6852912831716598])
    '''

def detect_unreliable_regions(real_pnp, col_score):
    getMatrix()
    tmp_un_sp_arr = []
    peak_length_ratio = 0.0
    filein = open(real_pnp, 'r')
    file_context = filein.read().splitlines()
    filein.close()
    dic = {}
    has_key = False
    value = ""
    key = ""
    for itm in range(len(file_context)):
        if file_context[itm][0:1] == ">":
            if has_key == True:
                dic[key] = value
                value = ""
                key = ""
                has_key = False
            has_key = True
            key = file_context[itm]
        elif has_key == True:
            value = value.replace("\r","") + file_context[itm].replace("\r","")
    dic[key] = value
    dickeys =sorted(dic.keys())
    lens_ = (len(dickeys) * (len(dickeys) - 1)) / 2
    lens = len(value)
    tmp_un_sp = 0.0
    fileout = open(col_score, 'w')
    fileout.write("#COL\t#COL_Score\n")
    for i in range(lens):
        tmp_score = 0.0
        for k1 in range(len(dickeys)):
            for k2 in range(k1, len(dickeys)):
                if getIdx(dic[dickeys[k1]][i]) == -1 or getIdx(dic[dickeys[k2]][i]) == -1:
                    tmp_score += 0
                else:
                    tmp_score += float(matrix[getIdx(dic[dickeys[k1]][i])][getIdx(dic[dickeys[k2]][i])])
        tmp_score /= lens_
        tmp_un_sp += tmp_score
        tmp_un_sp_arr.append(tmp_score)
        fileout.write(str(i + 1) + "\t" + str(tmp_score) + "\n")
    fileout.write("#END\n")
    fileout.close()
    print("Calculated Column Score!")
    tmp_sd = 0.0
    if lens != 0:
        tmp_un_sp /= lens
        tmp_sd = getSD(tmp_un_sp, tmp_un_sp_arr, lens)
        peak_length_ratio = getPeak_Length_Ratio(tmp_un_sp_arr, lens)
    else:
        tmp_un_sp = 0
    return tmp_un_sp, lens, len(dickeys), tmp_sd, peak_length_ratio

def getSD(tmp_un_sp, tmp_un_sp_arr, lens):
    sd_ = 0.0
    for item in tmp_un_sp_arr:
        sd_ += (float(item) - float(tmp_un_sp)) ** 2
    sd_ /= lens
    return math.sqrt(sd_)

def getPeak_Length_Ratio(tmp_un_sp_arr, lens):
    ratio = 0.0
    for item in tmp_un_sp_arr:
        if float(item) >= 1.0:
            ratio += 1
    return ratio / lens

def getIdx(char):
    for i in range(len(tmp_str)):
        if char == tmp_str[i]:
            return i
    return -1

if __name__ == '__main__':
    detect_unreliable_regions("head_ret.msa", "ret.tmp")
